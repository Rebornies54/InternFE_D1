const { pool } = require('../config/connection');
const bcrypt = require('bcryptjs');
const EmailService = require('./emailService');

class OTPService {
  // C·∫•u h√¨nh rate limiting
  static RATE_LIMIT = {
    MIN_INTERVAL: 10, // 10 gi√¢y gi·ªØa c√°c l·∫ßn g·ª≠i OTP (gi·∫£m cho development)
    MAX_ATTEMPTS_PER_HOUR: 10, // T·ªëi ƒëa 10 l·∫ßn g·ª≠i OTP trong 1 gi·ªù
    MAX_ATTEMPTS_PER_DAY: 20, // T·ªëi ƒëa 20 l·∫ßn g·ª≠i OTP trong 1 ng√†y
    OTP_EXPIRY: 10 * 60, // 10 ph√∫t
    MAX_VERIFY_ATTEMPTS: 5 // T·ªëi ƒëa 5 l·∫ßn nh·∫≠p sai OTP
  };

  // Ki·ªÉm tra rate limit
  static async checkRateLimit(email) {
    const now = new Date();
    const oneHourAgo = new Date(now.getTime() - 60 * 60 * 1000);
    const oneDayAgo = new Date(now.getTime() - 24 * 60 * 60 * 1000);

    try {
      // Ki·ªÉm tra OTP g·∫ßn nh·∫•t
      const [recentOTP] = await pool.execute(
        `SELECT created_at, last_attempt_at 
         FROM password_reset_otps 
         WHERE email = ? AND used = 0 
         ORDER BY created_at DESC 
         LIMIT 1`,
        [email]
      );

      if (recentOTP.length > 0) {
        const lastCreated = new Date(recentOTP[0].created_at);
        const timeSinceLastOTP = (now - lastCreated) / 1000;

        if (timeSinceLastOTP < this.RATE_LIMIT.MIN_INTERVAL) {
          const remainingTime = Math.ceil(this.RATE_LIMIT.MIN_INTERVAL - timeSinceLastOTP);
          throw new Error(`Vui l√≤ng ƒë·ª£i ${remainingTime} gi√¢y tr∆∞·ªõc khi g·ª≠i OTP m·ªõi`);
        }
      }

      // Ki·ªÉm tra s·ªë l·∫ßn g·ª≠i trong 1 gi·ªù
      const [hourlyAttempts] = await pool.execute(
        `SELECT COUNT(*) as count 
         FROM password_reset_otps 
         WHERE email = ? AND created_at > ?`,
        [email, oneHourAgo]
      );

      if (hourlyAttempts[0].count >= this.RATE_LIMIT.MAX_ATTEMPTS_PER_HOUR) {
        throw new Error('B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu OTP trong 1 gi·ªù. Vui l√≤ng th·ª≠ l·∫°i sau');
      }

      // Ki·ªÉm tra s·ªë l·∫ßn g·ª≠i trong 1 ng√†y
      const [dailyAttempts] = await pool.execute(
        `SELECT COUNT(*) as count 
         FROM password_reset_otps 
         WHERE email = ? AND created_at > ?`,
        [email, oneDayAgo]
      );

      if (dailyAttempts[0].count >= this.RATE_LIMIT.MAX_ATTEMPTS_PER_DAY) {
        throw new Error('B·∫°n ƒë√£ g·ª≠i qu√° nhi·ªÅu OTP trong 1 ng√†y. Vui l√≤ng th·ª≠ l·∫°i v√†o ng√†y mai');
      }

      return true;
    } catch (error) {
      throw error;
    }
  }

  // T·∫°o OTP m·ªõi v·ªõi transaction
  static async createOTP(email) {
    const connection = await pool.getConnection();
    
    try {
      await connection.beginTransaction();

      // Ki·ªÉm tra rate limit
      await this.checkRateLimit(email);

      // L·∫•y th√¥ng tin user
      const [users] = await connection.execute(
        'SELECT id, name FROM users WHERE email = ?',
        [email]
      );

      if (users.length === 0) {
        throw new Error('Email kh√¥ng t·ªìn t·∫°i trong h·ªá th·ªëng');
      }

      const user = users[0];

      // V√¥ hi·ªáu h√≥a OTP c≈© (n·∫øu c√≥)
      await connection.execute(
        'UPDATE password_reset_otps SET used = 1 WHERE email = ? AND used = 0',
        [email]
      );

      // T·∫°o OTP m·ªõi
      const otp = Math.floor(100000 + Math.random() * 900000).toString();
      const expiresAt = new Date(Date.now() + this.RATE_LIMIT.OTP_EXPIRY * 1000);

      // L∆∞u OTP m·ªõi
      await connection.execute(
        `INSERT INTO password_reset_otps 
         (user_id, email, otp, expires_at, attempt_count, last_attempt_at) 
         VALUES (?, ?, ?, ?, 0, NOW())`,
        [user.id, email, otp, expiresAt]
      );

      await connection.commit();

      // G·ª≠i email OTP th·∫≠t
      try {
        await EmailService.sendOTP(email, otp, user.name);
        console.log(`‚úÖ OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${email}`);
      } catch (emailError) {
        console.error('‚ùå L·ªói khi g·ª≠i email OTP:', emailError.message);
        // Trong m√¥i tr∆∞·ªùng development, v·∫´n tr·∫£ v·ªÅ OTP ƒë·ªÉ test
        if (process.env.NODE_ENV === 'development') {
          console.log(`üîß Development mode: OTP = ${otp}`);
        }
      }

      return {
        otp: process.env.NODE_ENV === 'development' ? otp : undefined, // Ch·ªâ tr·∫£ v·ªÅ OTP trong development
        expiresAt,
        message: `OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn ${email}`
      };

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  }

  // X√°c th·ª±c OTP v·ªõi attempt tracking
  static async verifyOTP(email, otp) {
    const connection = await pool.getConnection();
    
    try {
      await connection.beginTransaction();

      // T√¨m OTP h·ª£p l·ªá
      const [otpRecords] = await connection.execute(
        `SELECT * FROM password_reset_otps 
         WHERE email = ? AND otp = ? AND expires_at > NOW() AND used = 0`,
        [email, otp]
      );

      if (otpRecords.length === 0) {
        // TƒÉng s·ªë l·∫ßn th·ª≠ sai
        await connection.execute(
          `UPDATE password_reset_otps 
           SET attempt_count = attempt_count + 1, last_attempt_at = NOW() 
           WHERE email = ? AND used = 0`,
          [email]
        );

        // Ki·ªÉm tra xem c√≥ v∆∞·ª£t qu√° s·ªë l·∫ßn th·ª≠ kh√¥ng
        const [attempts] = await connection.execute(
          `SELECT attempt_count FROM password_reset_otps 
           WHERE email = ? AND used = 0`,
          [email]
        );

        if (attempts.length > 0 && attempts[0].attempt_count >= this.RATE_LIMIT.MAX_VERIFY_ATTEMPTS) {
          // V√¥ hi·ªáu h√≥a OTP n·∫øu th·ª≠ sai qu√° nhi·ªÅu
          await connection.execute(
            'UPDATE password_reset_otps SET used = 1 WHERE email = ? AND used = 0',
            [email]
          );
          throw new Error('B·∫°n ƒë√£ nh·∫≠p sai OTP qu√° nhi·ªÅu l·∫ßn. Vui l√≤ng y√™u c·∫ßu OTP m·ªõi');
        }

        throw new Error('OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      }

      const otpRecord = otpRecords[0];

      // Reset attempt count khi OTP ƒë√∫ng
      await connection.execute(
        'UPDATE password_reset_otps SET attempt_count = 0 WHERE id = ?',
        [otpRecord.id]
      );

      await connection.commit();

      return {
        success: true,
        message: 'OTP h·ª£p l·ªá',
        otpRecord
      };

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  }

  // Reset password v·ªõi OTP
  static async resetPassword(email, otp, newPassword) {
    const connection = await pool.getConnection();
    
    try {
      await connection.beginTransaction();

      // X√°c th·ª±c OTP
      const verifyResult = await this.verifyOTP(email, otp);
      
      if (!verifyResult.success) {
        throw new Error('OTP kh√¥ng h·ª£p l·ªá');
      }

      // Hash m·∫≠t kh·∫©u m·ªõi
      const hashedPassword = await bcrypt.hash(newPassword, 12);

      // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u
      await connection.execute(
        'UPDATE users SET password = ? WHERE email = ?',
        [hashedPassword, email]
      );

      // ƒê√°nh d·∫•u OTP ƒë√£ s·ª≠ d·ª•ng
      await connection.execute(
        'UPDATE password_reset_otps SET used = 1 WHERE email = ? AND otp = ? AND used = 0',
        [email, otp]
      );

      await connection.commit();

      return {
        success: true,
        message: 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i th√†nh c√¥ng'
      };

    } catch (error) {
      await connection.rollback();
      throw error;
    } finally {
      connection.release();
    }
  }

  // Cleanup OTP h·∫øt h·∫°n (c√≥ th·ªÉ ch·∫°y ƒë·ªãnh k·ª≥)
  static async cleanupExpiredOTPs() {
    try {
      await pool.execute(
        'DELETE FROM password_reset_otps WHERE expires_at < NOW() OR used = 1'
      );
      console.log('‚úÖ ƒê√£ d·ªçn d·∫πp OTP h·∫øt h·∫°n');
    } catch (error) {
      console.error('‚ùå L·ªói khi d·ªçn d·∫πp OTP:', error);
    }
  }

  // L·∫•y th·ªëng k√™ OTP cho admin
  static async getOTPStats(email = null) {
    try {
      let query = `
        SELECT 
          email,
          COUNT(*) as total_attempts,
          SUM(CASE WHEN used = 1 THEN 1 ELSE 0 END) as used_count,
          SUM(CASE WHEN expires_at < NOW() THEN 1 ELSE 0 END) as expired_count,
          MAX(created_at) as last_attempt
        FROM password_reset_otps
      `;
      
      const params = [];
      if (email) {
        query += ' WHERE email = ?';
        params.push(email);
      }
      
      query += ' GROUP BY email ORDER BY last_attempt DESC';
      
      const [stats] = await pool.execute(query, params);
      return stats;
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™ OTP:', error);
      throw error;
    }
  }
}

module.exports = OTPService;
